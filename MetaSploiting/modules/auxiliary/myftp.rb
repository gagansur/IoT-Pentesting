require 'metasploit/framework/credential_collection'
require 'metasploit/framework/login_scanner/ftp'


class MetasploitModule < Msf::Auxiliary
  include Msf::Exploit::Remote::Ftp
  include Msf::Auxiliary::Scanner
  include Msf::Auxiliary::Report
  def initialize
    super(
      'Name'        => 'My ftp',
      'Description' => 'Detect ftp version from the target',
      'Author'      => 'Gagandeep K Sur',
      'License'     =>  MSF_LICENSE
    )
    register_options(
      [
        Opt::RPORT(21),
      ])
  end

  def run_host(target_host)
    connect(true, false)
    if(banner)
      print_status("#{rhost} is running #{banner}")
      report_service(:host => rhost, :port => rport, :name => "ftp", :info => banner)
    end
    disconnect
  end

  def connect(global = true, verbose = nil)
    verbose ||=datastore['FTPDEBUG']
    verbose ||=datastore['VERBOSE']

    print_status("Connecting to FTP Server #{rhost}:i#{rport}...") if verbose

    fd = super(global)
    # Wait for a banner to arrive
    self.banner = recv_ftp_resp(fd)

    print_status("Connected to FTP Server #{rhost}:{rport}...") if verbose
    # return the file descripter to the caller
    fd
  end
  
  def report_service(optd={})
    return if not db
    opts = {
      :workspace => myworkspace,
      :task => mytask
    }.merge(opts)
    framework.db.report_service(opts)
  end

  def report_note(opts={})
    return if not db 
    opts = {
      :workspace => myworkspace, 
      :task => mytask
    }.merge(opts)
    framework.db.report_note(opts)
  end
end
